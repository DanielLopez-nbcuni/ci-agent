#!/usr/bin/env bash

# This script configures the pipelines build agent.

BRANCH_NAME_LENGTH_LIMIT=35

echo "Configuring build settings..."
# URL safe branch name
BRANCH_NAME_SAFE="$(echo -n $BITBUCKET_BRANCH | sed -e 's/[^A-Za-z0-9]/-/g' | awk '{print tolower($0)}')"
# Trim the branch name if longer than BRANCH_NAME_LENGTH_LIMIT and append the md5sum to keep the branch name unique
if (( "${#BRANCH_NAME_SAFE}" > "$BRANCH_NAME_LENGTH_LIMIT" )); then
	BRANCH_NAME_SAFE="$(echo -n $BRANCH_NAME_SAFE | cut -c1-30)-$(echo -n $BRANCH_NAME_SAFE | md5sum | cut -c1-4)"
fi

# Trim repo slug to 30 characters. If someone has a repo name longer than that, then no mercy for them.
export BITBUCKET_REPO_SLUG_SAFE="${BITBUCKET_REPO_SLUG:0:30}"
export BRANCH_NAME_SAFE
export REMOTE_BUILD_DIR="/home/ubuntu/builds/$BITBUCKET_REPO_SLUG_SAFE-$BRANCH_NAME_SAFE"
export COMPOSE_PROJECT_NAME="$BITBUCKET_REPO_SLUG_SAFE-$BRANCH_NAME_SAFE"

# Use DOCKSAL_HOST (domain name) if set, otherwise use DOCKSAL_HOST_IP (IP) with xip.io
DOCKSAL_HOST="${DOCKSAL_HOST:-$DOCKSAL_HOST_IP.xip.io}"
sed -i "s/HostName DOCKSAL_HOST/HostName $DOCKSAL_HOST/g" $HOME/.ssh/config

# User ubuntu as a user by default
DOCKSAL_HOST_USER="${DOCKSAL_HOST_USER:-ubuntu}"
sed -i "s/User DOCKSAL_HOST_USER/User $DOCKSAL_HOST_USER/g" $HOME/.ssh/config

# NOTE: The length of any one label in the domain name is limited to between 1 and 63 octets.
export DOMAIN="$BRANCH_NAME_SAFE.$BITBUCKET_REPO_SLUG_SAFE.$DOCKSAL_HOST"

echo "Configuring ssh access..."
(umask  077 ; echo "$CI_SSH_KEY" | base64 -d > $HOME/.ssh/id_rsa)
(umask  077 ; echo "$DOCKSAL_HOST_SSH_KEY" | base64 -d > $HOME/.ssh/docksal_host_id_rsa)

# Configure git
git config --global user.email "${CI_GIT_USER_EMAIL:-bitbucket-pipelines-agent@docksal.io}"
git config --global user.name "${CI_GIT_USER_NAME:-Bitbucket Pipelines Agent}"

# Initialize a tunnel to the Docker Engine on DOCKSAL_HOST
if [[ "$DOCKSAL_HOST_TUNNEL" != "" ]]; then
	echo "Setting up a secure tunnel to the Docker Engine on $DOCKSAL_HOST..."
	# Black magic! Remote docker.sock access over SSH tunnel
	# Credits:
	# https://docs.docker.com/docker-for-aws/deploy/#connecting-via-ssh
	# https://gist.github.com/scy/6781836#gistcomment-1559506
	ssh -fM -NL localhost:2374:/var/run/docker.sock docker-host

	echo "Querying Docker Engine..."
	docker --host localhost:2374 version
	# Export local tunnel connection settings if it works
	[[ $? == 0 ]] && export DOCKER_HOST="localhost:2374"
fi
